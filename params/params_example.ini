[base_params]
# This project uses the sbpd Stanford Building Parser Dataset 
dataset_name = sbpd
# The name of the default map is area3
building_name = Double_Corridor_OG
# Whether or not or load the 3D meshes from surreal/sd3dis
load_meshes = True
# Explicit seed for randomness generation
seed = 5
# False allows users to compute a new traversible when
# using a new area dataset, True will look for the
# precomputed traversible from the traversible folder
load_traversible = False
# Depending on system, those equipped with an X graphical 
# instance (or other display) can set this to True to use 
# the openGL renderer and render the 3D humans/scene
# NOTE: it is much more optimized to not keep it as False 
# and only plot the topviews concurrently 
# NOTE: concurrent openGL rendering is curently unsupported
render_3D = False

# The camera is assumed to be mounted on a robot at fixed 
# height and fixed pitch.
[camera_params]
# Camera modalities are either 'rgb' or 'disparity'
modalities=['rgb']
# width & height in pixels
width=64
height=64
# near plane clipping distance
z_near=0.01 
# far plane clipping distance
z_far=20.0  
fov_horizontal=90.0
fov_vertical=90.0
img_channels=3
im_resize=1.0
max_depth_meters=10e7

[surreal_params]
mode=train
# TODO: are these required?
body_shapes_train=[519, 1320, 521, 523, 779, 365, 1198, 368]
body_shapes_test=[337, 944, 1333, 502, 344, 538, 413]
# Rendering the human traversibles (only when render_3D is True)
compute_human_traversible=True
# Whether or not to use color when rendering
render_humans_in_gray_only=False

[robot_params]
# Port for the robot<->joystick communication
port=9010
# Number of frames to repeat last command (if simulation repeats)
repeat_freq=10
## Physical params
# The robot is modeled as a solid cylinder of height, 'height', 
# with radius, 'radius', base at height 'base' above the ground.
# The robot has a camera at height 'sensor_height' pointing at
# camera_elevation_degree degrees vertically from the horizontal
# plane.
# We are basing the base of the default robot from a pr2 robot
# more info here: https://robots.ieee.org/robots/pr2/
radius=0.334
base=5
height=100
sensor_height=80
# camera tilt
camera_elevation_degree=-45
delta_theta=1.0
## joystick params 
# number of updates between the joystick sending a 'sense world' request
sense_interval=4
# Set this to true if you want the Joystick to track the SimStates
track_sim_states=False
# Set this to true if you want the Joystick to track the velocities & accelerations
track_vel_accel=False
# Set this to true if you want the Joystick to write a log of the agents
write_pandas_log=True
# time in seconds between sending commands to the robot from the joystick 
cmd_delay=0.1
# whether or not to generate the joystick movie
generate_movie=True

[waypoint_params]
# Parameters for the projected image space grid
# Desired number of waypoints. Actual number may differ slightly
# See ./waypoint_grids/uniform_sampling_grid.py for more info
num_waypoints=20000
num_theta_bins=21
bound_min=[0.0, -2.5, -3.141592]
bound_max=[2.5, 2.5, 0.0]

[dynamics_params]
# Time delta used throughout all of socnav
dt=0.05
# velocity bounds
v_bounds=[0.0, 0.6]
# omega bounds
w_bounds=[-1.1, 1.1]
# Set the acceleration bounds such that by default they are never hit
linear_acc_max=10e7
angular_acc_max=10e7
## Simulation params
simulation_mode=ideal
# Soise parameters
is_noisy=False
noise_type=uniform
noise_lb=[-0.02, -0.02, 0.]
noise_ub=[0.02, 0.02, 0.]
noise_mean=[0., 0., 0.]
noise_std=[0.02, 0.02, 0.]

[control_pipeline_params]
# Spline params
# maximum planning time in seconds
max_final_time=10.0
# minimum planning time in seconds
minimum_spline_horizon=1.5
# LQR params
quad_coeffs=[1.0, 1.0, 1.0, 1.0, 1.0]
linear_coeffs=[0.0, 0.0, 0.0, 0.0, 0.0]
# Velocity binning params
num_bins=20
# Converting K to world coordinates is slow
# so only set this to true when LQR data is needed
convert_K_to_world_coordinates=False
# When not needed, LQR controllers can be discarded
# to save memory
discard_lqr_controller_data=True 
# Set this to True to ignore precomputed
# LQR trajectories
discard_precomputed_lqr_trajectories=False 
# Set this to true if you want trajectory objects to track
# linear and angular acceleration. If not set to false to save memory
track_trajectory_acceleration=False 
# Include debug prints
verbose=False

[simulator_params]
# Whether or not to wait for joystick inputs or use the repeat frame count
# found in [robot_params].repeat_freq
block_joystick=True
# Simulation tick rate multiplier (based off the dt found in [dynamics_params])
delta_t_scale=2
# Simulation frame image scalar
img_scale=2
# maximum frames for the renderer
max_frames=1000
# framerate scale of the final video (0<=X<=1)
# NOTE: set to 0 to not render any movie
fps_scale_down=0.5

[sbpd_simulator_params]
# Include debug prints
verbose_printing=False 

[agent_params]
# Radius of default agents (in meters)
radius=0.2
# Horizon in seconds
episode_horizon_s=200
# Time used on every iteration of the controller
control_horizon_s=0.5
# Whether to log videos (in GIF format) taken during the simulation
record_video=True 
# Whether or not to log all trajectory data to pickle
# files when running this simulator
save_trajectory_data=False 
## Obstacle Avoidance params
# Cutoff distances for the obstacle avoidance
obstacle_margin0=0.3 
obstacle_margin1=0.5 
# Exponential cost constant
power_obstacle=3 
# Scalar cost constant
obstacle_cost=1.0
## Angle Distance params
power_angle=1 
angle_cost=0.008
## Goal Distance params 
power_goal=2
goal_cost=0.08
# Cutoff distance for the goal
goal_margin=0.3
# Obj Fn params 
obj_type=valid_mean
num_validation_goals=50

[obstacle_map_params]
# Size of map, same as for SocNav FMM Map of Area3
map_size_2=[521, 600]
# Convert the grid spacing to units of meters. Should be 5cm for the S3DIS data
dx=0.05
# Origin is always 0,0 for SBPD
map_origin_2=[0, 0]
# Threshold distance from the obstacles to sample the start and the goal positions.
sampling_thres=2
# Number of grid steps around the start position to use for plotting
plotting_grid_steps=100